// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  sender    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  streak        Streak?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Streak {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @unique @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak Int            @default(1)
  highestStreak Int            @default(1)
  todayActiveTime Float         @default(0)
  lastActivity  DateTime       @default(now())
  streakSessions StreakSession[]
}

model StreakSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  streakId  String   @db.ObjectId
  streak    Streak   @relation(fields: [streakId], references: [id], onDelete: Cascade)
  startTime DateTime @default(now())
  endTime   DateTime?
  duration  Int      @default(0)
}
