// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// User messages for chat functionality
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  sender    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User relation
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt(sort: Desc)])
}

/// OAuth account information linked to a user
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// User session information
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

/// User profile and authentication information
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences
  prefersDarkMode Boolean @default(false)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  streak        Streak?
  messages      Message[]

  @@unique([email])
}

/// Token for email verification
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

/// User streak tracking for daily activity
model Streak {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  currentStreak   Int      @default(1)
  highestStreak   Int      @default(1)
  todayActiveTime Float    @default(0)
  lastActivity    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Statistics
  totalActiveTime Float    @default(0)
  daysActive      Int      @default(1)
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  streakSessions  StreakSession[]

  @@index([userId, lastActivity])
}

/// Individual streak session tracking
model StreakSession {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  streakId   String    @db.ObjectId
  startTime  DateTime  @default(now())
  endTime    DateTime?
  duration   Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Additional metadata
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  
  // Relations
  streak     Streak    @relation(fields: [streakId], references: [id], onDelete: Cascade)

  @@index([streakId])
  @@index([startTime, endTime])
}
